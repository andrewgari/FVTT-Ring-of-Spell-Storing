name: Version Bump and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(node -p "require('./module.json').version")
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
    - name: Calculate new version
      id: new_version
      run: |
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
        else
          # Parse current version
          CURRENT="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"
        
    - name: Update version in files
      run: |
        # Update module.json
        sed -i 's/"version": ".*"/"version": "${{ steps.new_version.outputs.NEW_VERSION }}"/' module.json
        
        # Update package.json
        sed -i 's/"version": ".*"/"version": "${{ steps.new_version.outputs.NEW_VERSION }}"/' package.json
        
    - name: Update CHANGELOG.md
      run: |
        # Create changelog entry
        DATE=$(date +"%Y-%m-%d")
        NEW_ENTRY="## [${{ steps.new_version.outputs.NEW_VERSION }}] - $DATE"
        
        # Create temporary file with new entry
        echo "$NEW_ENTRY" > temp_changelog.md
        echo "" >> temp_changelog.md
        echo "### Added" >> temp_changelog.md
        echo "- New features and improvements" >> temp_changelog.md
        echo "" >> temp_changelog.md
        echo "### Changed" >> temp_changelog.md
        echo "- Updates and modifications" >> temp_changelog.md
        echo "" >> temp_changelog.md
        echo "### Fixed" >> temp_changelog.md
        echo "- Bug fixes and corrections" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        # Prepend to existing changelog
        cat CHANGELOG.md >> temp_changelog.md
        mv temp_changelog.md CHANGELOG.md
        
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add module.json package.json CHANGELOG.md
        git commit -m "Bump version to ${{ steps.new_version.outputs.NEW_VERSION }}"
        git push
        
    - name: Create and push tag
      run: |
        git tag "v${{ steps.new_version.outputs.NEW_VERSION }}"
        git push origin "v${{ steps.new_version.outputs.NEW_VERSION }}"
        
    - name: Summary
      run: |
        echo "‚úÖ Version bumped from ${{ steps.current_version.outputs.CURRENT_VERSION }} to ${{ steps.new_version.outputs.NEW_VERSION }}"
        echo "üè∑Ô∏è Tag v${{ steps.new_version.outputs.NEW_VERSION }} created"
        echo "üöÄ Release workflow will be triggered automatically"
